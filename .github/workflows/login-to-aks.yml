name: login to aks
run-name: login to ${{ inputs.environment }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "environment"
        required: true
        type: environment

permissions:
  id-token: write
  contents: read

jobs:
  login:
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      TF_VAR_provider_token: test
      KUBE_CONFIG_PATH: ~/.kube/config
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.1.7'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - uses: azure/setup-helm@v4.3.0
      with:
         version: 'latest'
      id: install

    - name: setup terraform
      uses: hashicorp/setup-terraform@v3

    - name: login to azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: get aks creds
      run: |
        az aks get-credentials \
        --resource-group ${{ secrets.AKS_CLUSTER_RESOURCE_GROUP }} \
        --name ${{ secrets.AKS_CLUSTER_NAME }} \
        --overwrite-existing && \
        kubectl get nodes

    - name: terraform init
      run: |
        git config --global url."https://oauth2:${{ secrets.GITHUB_TOKEN }}@github.com".insteadOf https://github.com && \
        terraform -chdir=infra/${{ inputs.environment }} init \
        -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
        -backend-config="resource_group_name=${{ vars.TF_STATE_RESOURCE_GROUP_NAME }}"

    - name: terraform plan
      run: |
        [ "$(az aks list --query "[?name=='${{ secrets.AKS_CLUSTER_NAME }}'].name" -o tsv)" = "${{ secrets.AKS_CLUSTER_NAME }}" ] && \
        az aks get-credentials \
        --resource-group ${{ secrets.AKS_CLUSTER_RESOURCE_GROUP }} \
        --name ${{ secrets.AKS_CLUSTER_NAME }} \
        --overwrite-existing
        terraform -chdir=infra/${{ inputs.environment }} plan -no-color -out=tfplan

    - name: terraform apply
      run: |
        [ "$(az aks list --query "[?name=='${{ secrets.AKS_CLUSTER_NAME }}'].name" -o tsv)" = "${{ secrets.AKS_CLUSTER_NAME }}" ] && \
        az aks get-credentials \
        --resource-group ${{ secrets.AKS_CLUSTER_RESOURCE_GROUP }} \
        --name ${{ secrets.AKS_CLUSTER_NAME }} \
        --overwrite-existing
        terraform -chdir=infra/${{ inputs.environment }} apply -no-color tfplan

  # Azure logout
    - name: logout
      run: |
        az logout
      if: always()
